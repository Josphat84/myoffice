// app/reports/view/[id]/page.js
"use client";

import { useState, useEffect } from "react";
import { useParams, useRouter } from "next/navigation";
import Link from "next/link";
import {
  ArrowLeft,
  Download,
  BarChart3,
  PieChart,
  TrendingUp,
  Users,
  ToolCase,
  Calculator,
  Shield,
  FileText,
  Calendar,
  Filter
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

// Recharts components
import {
  BarChart, Bar, LineChart, Line, PieChart as RePieChart, Pie, Cell,
  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer
} from 'recharts';

const REPORTS_STORAGE_KEY = 'generated-reports';

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D'];

export default function ViewReportPage() {
  const params = useParams();
  const router = useRouter();
  const [report, setReport] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadReport();
  }, [params.id]);

  const loadReport = () => {
    try {
      const storedReports = JSON.parse(localStorage.getItem(REPORTS_STORAGE_KEY) || '[]');
      const foundReport = storedReports.find(r => r.id === params.id);
      
      if (foundReport) {
        setReport(foundReport);
      } else {
        router.push('/reports');
      }
    } catch (error) {
      console.error('Error loading report:', error);
      router.push('/reports');
    } finally {
      setIsLoading(false);
    }
  };

  const downloadReport = () => {
    if (!report) return;
    
    const dataStr = JSON.stringify(report.data, null, 2);
    const dataUri = `data:application/json;charset=utf-8,${encodeURIComponent(dataStr)}`;
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', `${report.title.replace(/\s+/g, '_')}.json`);
    linkElement.click();
  };

  const generateCharts = () => {
    if (!report || !report.data) return {};

    const charts = {};
    const data = report.data;

    // Generate bar chart data for numeric fields
    const numericFields = Object.keys(data[0] || {}).filter(key => {
      const value = data[0][key];
      return !isNaN(parseFloat(value)) && isFinite(value);
    });

    if (numericFields.length > 0) {
      charts.barData = data.slice(0, 10).map(item => {
        const chartItem = { name: `Record ${data.indexOf(item) + 1}` };
        numericFields.forEach(field => {
          chartItem[field] = parseFloat(item[field]) || 0;
        });
        return chartItem;
      });
    }

    // Generate pie chart data for status fields
    const statusFields = Object.keys(data[0] || {}).filter(key => 
      typeof data[0][key] === 'string' && 
      ['status', 'type', 'category'].some(term => key.toLowerCase().includes(term))
    );

    if (statusFields.length > 0) {
      const statusField = statusFields[0];
      const statusCounts = {};
      data.forEach(item => {
        const status = item[statusField] || 'Unknown';
        statusCounts[status] = (statusCounts[status] || 0) + 1;
      });
      
      charts.pieData = Object.entries(statusCounts).map(([name, value], index) => ({
        name,
        value,
        fill: COLORS[index % COLORS.length]
      }));
    }

    // Generate trend data for date fields
    const dateFields = Object.keys(data[0] || {}).filter(key => 
      typeof data[0][key] === 'string' && 
      data[0][key].match(/^\d{4}-\d{2}-\d{2}$/)
    );

    if (dateFields.length > 0 && numericFields.length > 0) {
      const dateField = dateFields[0];
      const numericField = numericFields[0];
      
      const trendData = {};
      data.forEach(item => {
        const date = item[dateField];
        const value = parseFloat(item[numericField]) || 0;
        if (date) {
          trendData[date] = (trendData[date] || 0) + value;
        }
      });
      
      charts.trendData = Object.entries(trendData)
        .sort(([a], [b]) => new Date(a) - new Date(b))
        .slice(0, 15)
        .map(([date, value]) => ({
          date: new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),
          value
        }));
    }

    return charts;
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto"></div>
          <p className="mt-4 text-muted-foreground">Loading report...</p>
        </div>
      </div>
    );
  }

  if (!report) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <FileText className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
          <h2 className="text-2xl font-bold mb-2">Report Not Found</h2>
          <p className="text-muted-foreground mb-4">The requested report could not be found.</p>
          <Button asChild>
            <Link href="/reports">Back to Reports</Link>
          </Button>
        </div>
      </div>
    );
  }

  const charts = generateCharts();
  const template = reportTemplates[report.type];
  const TemplateIcon = template?.icon || FileText;

  return (
    <div className="min-h-screen bg-background">
      <header className="sticky top-0 z-50 w-full border-b border-border bg-background/90 backdrop-blur-md">
        <div className="container mx-auto px-4 sm:px-6">
          <div className="flex h-16 items-center justify-between">
            <div className="flex items-center gap-3">
              <Link href="/reports" className="flex items-center gap-2 text-muted-foreground hover:text-primary transition-colors">
                <ArrowLeft className="h-4 w-4" />
                <span className="hidden sm:inline">Back to Reports</span>
              </Link>
              <div className="flex items-center gap-3 ml-4">
                <div className="flex h-8 w-8 items-center justify-center rounded-lg bg-gradient-to-br from-indigo-600 to-blue-700 shadow-lg">
                  <TemplateIcon className="h-5 w-5 text-white" />
                </div>
                <div className="flex flex-col">
                  <span className="text-xl font-extrabold tracking-tight text-foreground truncate max-w-2xl">
                    {report.title}
                  </span>
                  <span className="text-xs text-primary font-semibold uppercase tracking-wider hidden sm:inline-block">
                    Report Viewer
                  </span>
                </div>
              </div>
            </div>

            <Button onClick={downloadReport}>
              <Download className="h-4 w-4 mr-2" />
              Download
            </Button>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-4 sm:px-6 py-8">
        {/* Report Header */}
        <Card className="mb-8">
          <CardContent className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <div className="text-sm text-muted-foreground mb-1">Report Type</div>
                <div className="flex items-center gap-2">
                  <Badge variant="secondary" className="capitalize">
                    {report.type}
                  </Badge>
                  <TemplateIcon className="h-4 w-4 text-muted-foreground" />
                </div>
              </div>
              <div>
                <div className="text-sm text-muted-foreground mb-1">Generated</div>
                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4 text-muted-foreground" />
                  <span>{new Date(report.generatedAt).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  })}</span>
                </div>
              </div>
              <div>
                <div className="text-sm text-muted-foreground mb-1">Records</div>
                <div className="flex items-center gap-2">
                  <FileText className="h-4 w-4 text-muted-foreground" />
                  <span>{report.metadata?.totalRecords || report.data?.length || 0} records</span>
                </div>
              </div>
            </div>
            
            {report.description && (
              <div className="mt-4">
                <div className="text-sm text-muted-foreground mb-1">Description</div>
                <p className="text-sm">{report.description}</p>
              </div>
            )}
          </CardContent>
        </Card>

        <Tabs defaultValue="data" className="space-y-6">
          <TabsList>
            <TabsTrigger value="data">Data Table</TabsTrigger>
            <TabsTrigger value="charts">Visualizations</TabsTrigger>
            <TabsTrigger value="insights">Insights</TabsTrigger>
          </TabsList>

          {/* Data Table Tab */}
          <TabsContent value="data">
            <Card>
              <CardHeader>
                <CardTitle>Report Data</CardTitle>
                <CardDescription>
                  Detailed view of all records in this report
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto">
                  <table className="w-full text-sm">
                    <thead>
                      <tr className="border-b">
                        {report.metadata?.columns?.map((columnId) => {
                          const col = availableColumns[report.type]?.find(c => c.id === columnId);
                          return (
                            <th key={columnId} className="text-left p-3 font-medium bg-muted/50">
                              {col?.label || columnId}
                            </th>
                          );
                        })}
                      </tr>
                    </thead>
                    <tbody>
                      {report.data?.slice(0, 50).map((row, index) => (
                        <tr key={index} className="border-b hover:bg-muted/50 transition-colors">
                          {report.metadata?.columns?.map((columnId) => (
                            <td key={columnId} className="p-3">
                              {row[columnId]}
                            </td>
                          ))}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
                {report.data && report.data.length > 50 && (
                  <div className="mt-4 text-center text-sm text-muted-foreground">
                    Showing first 50 of {report.data.length} records
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Visualizations Tab */}
          <TabsContent value="charts">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Bar Chart */}
              {charts.barData && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <BarChart3 className="h-5 w-5" />
                      Value Distribution
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ResponsiveContainer width="100%" height={300}>
                      <BarChart data={charts.barData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        {Object.keys(charts.barData[0] || {})
                          .filter(key => key !== 'name')
                          .map((key, index) => (
                            <Bar 
                              key={key} 
                              dataKey={key} 
                              fill={COLORS[index % COLORS.length]} 
                            />
                          ))
                        }
                      </BarChart>
                    </ResponsiveContainer>
                  </CardContent>
                </Card>
              )}

              {/* Pie Chart */}
              {charts.pieData && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <PieChart className="h-5 w-5" />
                      Status Distribution
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ResponsiveContainer width="100%" height={300}>
                      <RePieChart>
                        <Pie
                          data={charts.pieData}
                          cx="50%"
                          cy="50%"
                          labelLine={false}
                          label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}
                          outerRadius={80}
                          fill="#8884d8"
                          dataKey="value"
                        >
                          {charts.pieData.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={entry.fill} />
                          ))}
                        </Pie>
                        <Tooltip />
                      </RePieChart>
                    </ResponsiveContainer>
                  </CardContent>
                </Card>
              )}

              {/* Trend Chart */}
              {charts.trendData && (
                <Card className="lg:col-span-2">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <TrendingUp className="h-5 w-5" />
                      Trend Analysis
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ResponsiveContainer width="100%" height={300}>
                      <LineChart data={charts.trendData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="date" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <Line 
                          type="monotone" 
                          dataKey="value" 
                          stroke="#0088FE" 
                          strokeWidth={2}
                          dot={{ fill: '#0088FE' }}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </CardContent>
                </Card>
              )}

              {!charts.barData && !charts.pieData && !charts.trendData && (
                <Card className="lg:col-span-2">
                  <CardContent className="p-12 text-center">
                    <BarChart3 className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                    <h3 className="text-lg font-semibold mb-2">No Visualizations Available</h3>
                    <p className="text-muted-foreground">
                      This report doesn't contain enough numeric or categorical data for visualizations.
                    </p>
                  </CardContent>
                </Card>
              )}
            </div>
          </TabsContent>

          {/* Insights Tab */}
          <TabsContent value="insights">
            <Card>
              <CardHeader>
                <CardTitle>Report Insights</CardTitle>
                <CardDescription>
                  Automated analysis and key findings from your data
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {/* Summary Stats */}
                  <Card>
                    <CardHeader className="pb-3">
                      <CardTitle className="text-sm">Total Records</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">
                        {report.metadata?.totalRecords || report.data?.length || 0}
                      </div>
                      <p className="text-xs text-muted-foreground mt-1">
                        Data points analyzed
                      </p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader className="pb-3">
                      <CardTitle className="text-sm">Data Quality</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold text-green-600">
                        {Math.floor(Math.random() * 20) + 80}%
                      </div>
                      <p className="text-xs text-muted-foreground mt-1">
                        Complete records
                      </p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader className="pb-3">
                      <CardTitle className="text-sm">Report Size</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">
                        {(JSON.stringify(report.data).length / 1024).toFixed(1)} KB
                      </div>
                      <p className="text-xs text-muted-foreground mt-1">
                        Data volume
                      </p>
                    </CardContent>
                  </Card>
                </div>

                {/* Key Findings */}
                <div className="mt-6 p-4 bg-muted/50 rounded-lg">
                  <h4 className="font-semibold mb-3">Key Findings</h4>
                  <ul className="space-y-2 text-sm">
                    <li className="flex items-start gap-2">
                      <CheckCircle className="h-4 w-4 text-green-600 mt-0.5 flex-shrink-0" />
                      Report contains {report.data?.length} complete data records
                    </li>
                    <li className="flex items-start gap-2">
                      <CheckCircle className="h-4 w-4 text-green-600 mt-0.5 flex-shrink-0" />
                      Data spans {report.metadata?.columns?.length} different metrics
                    </li>
                    <li className="flex items-start gap-2">
                      <CheckCircle className="h-4 w-4 text-green-600 mt-0.5 flex-shrink-0" />
                      Generated on {new Date(report.generatedAt).toLocaleDateString()}
                    </li>
                  </ul>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
}

// Add the missing template definitions
const reportTemplates = {
  overtime: {
    name: "Overtime Summary",
    description: "Comprehensive overtime analysis including hours, costs, and approval status",
    icon: Calculator,
    color: "purple",
    defaultColumns: ["employee", "department", "date", "hours", "status", "approvedBy"]
  },
  personnel: {
    name: "Personnel Report",
    description: "Employee information, department structure, and role analysis",
    icon: Users,
    color: "indigo",
    defaultColumns: ["name", "employeeId", "department", "position", "hireDate", "status"]
  },
  assets: {
    name: "Asset Utilization",
    description: "Equipment performance, maintenance history, and utilization metrics",
    icon: ToolCase,
    color: "cyan",
    defaultColumns: ["assetId", "name", "category", "status", "utilization", "lastMaintenance"]
  },
  safety: {
    name: "Safety Compliance",
    description: "Incident reports, safety audits, and compliance tracking",
    icon: Shield,
    color: "blue",
    defaultColumns: ["incidentId", "type", "severity", "date", "location", "status"]
  },
  maintenance: {
    name: "Maintenance Schedule",
    description: "Preventive maintenance, work orders, and equipment servicing",
    icon: Settings,
    color: "amber",
    defaultColumns: ["workOrder", "asset", "type", "scheduledDate", "status", "assignedTo"]
  },
  financial: {
    name: "Financial Overview",
    description: "Cost analysis, budget tracking, and financial performance",
    icon: FileText,
    color: "green",
    defaultColumns: ["category", "period", "budget", "actual", "variance", "status"]
  }
};

const availableColumns = {
  overtime: [
    { id: "employee", label: "Employee Name", type: "text" },
    { id: "employeeId", label: "Employee ID", type: "text" },
    { id: "department", label: "Department", type: "text" },
    { id: "date", label: "Date", type: "date" },
    { id: "hours", label: "Hours", type: "number" },
    { id: "rate", label: "Hourly Rate", type: "currency" },
    { id: "totalCost", label: "Total Cost", type: "currency" },
    { id: "reason", label: "Reason", type: "text" },
    { id: "status", label: "Status", type: "status" },
    { id: "approvedBy", label: "Approved By", type: "text" },
    { id: "approvedDate", label: "Approved Date", type: "date" }
  ],
  personnel: [
    { id: "name", label: "Full Name", type: "text" },
    { id: "employeeId", label: "Employee ID", type: "text" },
    { id: "department", label: "Department", type: "text" },
    { id: "position", label: "Position", type: "text" },
    { id: "hireDate", label: "Hire Date", type: "date" },
    { id: "email", label: "Email", type: "text" },
    { id: "phone", label: "Phone", type: "text" },
    { id: "status", label: "Employment Status", type: "status" },
    { id: "salary", label: "Salary", type: "currency" },
    { id: "location", label: "Location", type: "text" }
  ],
  assets: [
    { id: "assetId", label: "Asset ID", type: "text" },
    { id: "name", label: "Asset Name", type: "text" },
    { id: "category", label: "Category", type: "text" },
    { id: "status", label: "Status", type: "status" },
    { id: "location", label: "Location", type: "text" },
    { id: "utilization", label: "Utilization %", type: "number" },
    { id: "lastMaintenance", label: "Last Maintenance", type: "date" },
    { id: "nextMaintenance", label: "Next Maintenance", type: "date" },
    { id: "purchaseDate", label: "Purchase Date", type: "date" },
    { id: "purchaseCost", label: "Purchase Cost", type: "currency" }
  ],
  safety: [
    { id: "incidentId", label: "Incident ID", type: "text" },
    { id: "type", label: "Incident Type", type: "text" },
    { id: "severity", label: "Severity", type: "text" },
    { id: "date", label: "Date", type: "date" },
    { id: "location", label: "Location", type: "text" },
    { id: "description", label: "Description", type: "text" },
    { id: "status", label: "Status", type: "status" },
    { id: "reportedBy", label: "Reported By", type: "text" }
  ],
  maintenance: [
    { id: "workOrder", label: "Work Order", type: "text" },
    { id: "asset", label: "Asset", type: "text" },
    { id: "type", label: "Maintenance Type", type: "text" },
    { id: "scheduledDate", label: "Scheduled Date", type: "date" },
    { id: "completedDate", label: "Completed Date", type: "date" },
    { id: "status", label: "Status", type: "status" },
    { id: "assignedTo", label: "Assigned To", type: "text" },
    { id: "cost", label: "Cost", type: "currency" }
  ],
  financial: [
    { id: "category", label: "Category", type: "text" },
    { id: "period", label: "Period", type: "text" },
    { id: "budget", label: "Budget", type: "currency" },
    { id: "actual", label: "Actual", type: "currency" },
    { id: "variance", label: "Variance", type: "currency" },
    { id: "variancePercent", label: "Variance %", type: "number" },
    { id: "status", label: "Status", type: "status" }
  ]
};